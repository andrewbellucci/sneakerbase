datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model UpVote {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  userId    String
  createdAt DateTime @default(now())
}

model DownVote {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  userId    String
  createdAt DateTime @default(now())
}

enum ImageStatus {
  PENDING
  PROCESSED
  PROCESSING
  FAILED
  SUCCESS
  APPROVED
  REJECTED
  HAS_PLACEHOLDER
}

model Product {
  id                    String            @id @unique @default(uuid())
  title                 String            @db.VarChar(500)
  colorWay              String
  make                  String
  retailPrice           Float
  sku                   String            @unique
  slug                  String            @unique
  releaseDate           DateTime?
  previewImageUrl       String            @db.VarChar(500)
  description           String            @db.VarChar(2000)
  isPlaceholder         Boolean           @default(false)
  imageStatus           ImageStatus       @default(PENDING)
  stockXUrl             String?           @unique @db.VarChar(500)
  goatUrl               String?           @unique @db.VarChar(500)
  flightClubUrl         String?           @unique @db.VarChar(500)
  derivedColor          String?
  derivedSecondaryColor String?
  prices                Price[]
  updatedAt             DateTime          @updatedAt
  createdAt             DateTime?         @default(now())
  sneakersOfTheDay      SneakerOfTheDay[]
  visits                Visit[]
  upVotes               UpVote[]
  downVotes             DownVote[]
}

model Visit {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

enum Store {
  STOCKX
  GOAT
  STADIUMGOODS
  FLIGHTCLUB
}

model Price {
  id        String   @id @unique @default(uuid())
  store     Store
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  price     Float
  size      String
  change    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index(fields: [productId, store, size], name: "productId_store_size")
  @@index(fields: [store, size, createdAt], name: "store_size_createdAt")
  @@index(fields: [productId, change], name: "change")
}

model SneakerOfTheDay {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}
